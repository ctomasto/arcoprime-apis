openapi: 3.1.0
info:
  version: '1.0'
  title: ArcoPrime PIM project API/endpoints for products microservice
  description: API for products
  contact:
    name: API Support
    email: contacto@arcoprime.cl
    url: 'https://arcoprime.cl/'
  x-logo:
    url: 'https://www.prontocopec.cl/pronto/site/artic/20170516/imag/foto_0000000320170516112513.png'
    altText: PIM Pronto Copec
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:3000'
    description: Localhost
  - url: 'https://10nor47a33.execute-api.us-east-1.amazonaws.com/dev'
    description: Development sandbox
tags:
  - name: products
    description: Operations about products
paths:
  /product:
    get:
      summary: Search products
      description: Search product with params
      tags:
        - products
      operationId: get-product
      responses:
        '200':
          description: Product searched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/PageMeta'
        '404':
          description: Not Found
      parameters:
        - schema:
            type: number
          in: query
          name: page
          description: page number
          required: true
        - schema:
            type: number
            default: 10
          in: query
          name: take
          description: number of files per page
        - schema:
            type: string
            minLength: 3
          in: query
          name: value
          description: 'Value of name, brand or product SKU'
          required: false
        - schema:
            type: string
            minLength: 3
          in: query
          name: category
          description: ID of category to search
          required: false
        - schema:
            type: string
            minLength: 5
          in: query
          name: hierarchy
          description: ID of hierarchy to search
          required: false
        - schema:
            type: string
            minLength: 5
          in: query
          name: family
          description: ID of family to search
          required: false
        - schema:
            type: array
          in: query
          name: status
          description: Status to search
          required: false
        - schema:
            type: string
            minLength: 3
            maxLength: 4
          in: query
          name: order
          description: Order products ASC or DESC
          required: false
        - schema:
            type: string
          in: query
          name: orderProperty
          description: Field name to order products
          required: false
  /classification:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassificationLevel'
      operationId: get-classification
      parameters:
        - schema:
            type: number
            example: 2
            minimum: 1
            maximum: 4
          in: query
          name: level
          required: true
        - schema:
            type: string
            example: A0101
          in: query
          name: parentLevelId
  /product/load:
    post:
      tags:
        - products
      summary: Load products
      description: Load products with a MS Excel file with info of products to be loaded massively
      operationId: post-load-products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileProductsLoad'
      responses:
        '201':
          description: File processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileProductsResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorFileProductsBadRequest'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /product/massive/process:
    post:
      summary: Process products massively
      operationId: post-product-massive-process
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileProcessingResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileProductsLoad'
        description: ''
      parameters:
        - schema:
            type: string
          in: header
          name: token
  '/society/{id}/distribution-channel':
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DistributionChannel'
        '404':
          description: Society not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-society-id-distribution-channel
      parameters:
        - schema:
            type: integer
            minimum: 0
            maximum: 1
            default: 1
          in: query
          name: status
    parameters:
      - schema:
          type: string
          example: ARPM
          enum:
            - ARPM
        name: id
        in: path
        required: true
        description: Society's id
  '/product/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the product in database
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-product-id
    patch:
      summary: Update product
      operationId: patch-update-product-id
      tags:
        - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDetail'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetail'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /catalog/storage-condition:
    get:
      summary: Storage condition
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-storage-condition
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/transport-mode:
    get:
      summary: Transport mode
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-transport-mode
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/measurement-unit:
    get:
      summary: Measurement unit
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-measurement-unit
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/supply-type:
    get:
      summary: Supply type
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-supply-type
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/content-type:
    get:
      summary: Content type
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-content-type
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/distribution-channel:
    get:
      summary: Distribution channel
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-distribution-channel
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/barcode-type:
    get:
      summary: Barcode types
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-barcode-type
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/item-group:
    get:
      summary: Item group
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-item-group
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/tax:
    get:
      summary: Specific tax
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-tax
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/ecommerce-channel:
    get:
      summary: E-commerce channels
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-ecommerce-channel
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /catalog/document-type:
    get:
      summary: Document type
      tags:
        - catalog
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-catalog-document-type
      description: 'List all elements from catalog according to the type, ordered by name ASC'
    parameters: []
  /brand:
    parameters:
      - schema:
          type: string
        in: query
        name: name
        description: Name of the brand
        required: false
    get:
      summary: Get all brand
      tags:
        - brand
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-all-brand
      description: 'List all brands from catalog according to the type, ordered by name ASC'
  '/brand/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the brand in database
    get:
      summary: Get one brand
      tags:
        - brand
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CatalogItem'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      operationId: get-one-brand
      description: 'List one brand from catalog according to the type, ordered by name ASC'
  /catalog/food-attributes:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodAttribute'
        '400':
          description: Bad Request
      operationId: get-catalog-food-attributes
      description: List the food-attribute options
      parameters:
        - schema:
            type: integer
            minimum: 1
            maximum: 2
          in: query
          name: status
components:
  schemas:
    Product:
      title: Product
      type: object
      description: ''
      examples:
        - id: 50
          sku: '9849839'
          genericName: Pisco quebranta
          type: MERCADERIA
          creationStatus: TO_BE_APPROVED
          classification:
            family: Tragos preparados
            hierarchy: Bebidas alcoholicas
            category: Liquidos
          log:
            createdAt: '2022-05-05T18:52:27.376Z'
            updatedAt: '2022-05-05T18:52:27.376Z'
            createdBy:
              id: 1
              name: Sergio
              lastname: Bardales
              email: sergiobardales@arcoprime.cl
            updatedBy: null
          photoUrl: 'https://arpm-mrch-pim-backend-uploads-dev.s3.amazonaws.com/product/photo/37d73d7c-878d-4861-88fc-e8c5940d84b9.jpeg?AWSAccessKeyId=AKIA2O4LXKVXZSNHD35Z&Expires=1653172663&Signature=xOh47CxBF6lgvGoRQ7A976C2xjU%3D'
      properties:
        id:
          type: integer
          description: Unique identifier for the given product
        sku:
          type: string
        genericName:
          type: string
          minLength: 1
          maxLength: 15
        brandName:
          type: string
          format: email
        classification:
          $ref: '#/components/schemas/Clasification'
        type:
          type: string
          description: Set to true if the user's email has been verified.
          enum:
            - MERCADERIA
        creationStatus:
          type: string
          format: date
          description: The date that the user was created.
          enum:
            - EDITING
            - REVIEW
            - TO_BE_APPROVED
            - TO_BE_PUBLISHED
            - PUBLISHED
            - REJECTED
            - ERROR
        log:
          $ref: '#/components/schemas/Log'
        photoUrl:
          type: string
          format: uuid
    Clasification:
      title: Clasification
      type: object
      properties:
        category:
          type: string
        hierarchy:
          type: string
        family:
          type: string
    Log:
      title: Log
      type: object
      description: Model to support logging information
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2018-05-15T14:51:12.402+00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2018-05-15T14:51:12.402+00:00'
        createdBy:
          $ref: '#/components/schemas/User'
        updatedBy:
          $ref: '#/components/schemas/User'
    Error:
      title: Error
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
    PageMeta:
      title: PageMeta
      type: object
      description: pagination data
      properties:
        page:
          type: number
          description: current page
        take:
          type: number
          description: number of rows per page
        totalRecords:
          type: number
          description: total number of records
        pageCount:
          type: number
          description: total number of pages
        hasPreviusPage:
          type: boolean
          description: this flag means there is a previous page to retrieve
        hasNextPage:
          type: boolean
          description: this flag means there is a next page to retrieve
    User:
      title: User
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        lastname:
          type: string
        email:
          type: string
    ClassificationLevel:
      title: ClassificationLevel
      x-stoplight:
        id: 0lev1fag7pnkj
      type: object
      properties:
        id:
          type: string
        description:
          type: string
    FileProductsLoad:
      title: File with info of products to be loaded
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file
    FileFieldError:
      title: Errors in field validation
      type: array
      properties:
        field:
          type: string
          example: NOMBRE DE PRODUCTO(40)
          description: Name of the field (column) with error
        error:
          type: string
          example: Value is undefined
          description: Details of the error
      example:
        - field: NOMBRE DE PRODUCTO(40)
          error: Value is undefined
    FileProductsError:
      title: Products with errors in field validation
      type: array
      properties:
        row:
          type: integer
          example: 1
          description: Number of row in file
        name:
          type: string
          example: Papas
          description: Name of the product
        type:
          type: string
          example: MERCADERIA TIENDA
          description: Type of the product
        errors:
          type: array
          $ref: '#/components/schemas/FileFieldError'
      example:
        - row: 1
          name: ''
          type: Mercaderia tienda
          errors:
            - field: NOMBRE DE PRODUCTO(40)
              error: Value is undefined
    FileProductsSuccessfully:
      title: Products without errors in field validation
      type: array
      properties:
        row:
          type: integer
          example: 2
          description: Number of row in file
        name:
          type: string
          example: Papas
          description: Name of the product
        type:
          type: string
          example: MERCADERIA TIENDA
          description: Type of the product
        message:
          type: string
          example: Product ready to be processed
          description: Product ready to be processed
      example:
        - row: 2
          name: Papas
          type: MERCADERIA TIENDA
          message: Product ready to be processed
    FileProductsRepeated:
      title: Products with same barcode (SKU) in the database
      type: array
      properties:
        row:
          type: integer
          example: 3
          description: Number of row in file
        name:
          type: string
          example: Papas
          description: Name of the product
        type:
          type: string
          example: MERCADERIA TIENDA
          description: Type of the product
        message:
          type: string
          example: Product with barcode 123456 is in the database
          description: Product is repeated
      example:
        - row: 3
          name: Papas
          type: MERCADERIA TIENDA
          error: Product with barcode 123456 is in the database
    FileProductsResponse:
      title: API response after process file
      type: object
      properties:
        totalRows:
          type: number
          example: 150
          description: Total rows in files
        totalProcessed:
          type: number
          example: 100
          description: Total rows processed
        errorsCount:
          type: string
          example: 1/3
          description: Error counter with total
        productsErrors:
          type: array
          $ref: '#/components/schemas/FileProductsError'
        successfullyCount:
          type: string
          example: 1/3
          description: Successfully counter with total
        productsSuccessfully:
          type: array
          $ref: '#/components/schemas/FileProductsSuccessfully'
          example:
            - row: 2
              product: Papas
              type: Mercaderia tienda
              message: Product ready to be processed
        repeatedCount:
          type: string
          example: 1/3
          description: Repeated counter with total
        productsRepeated:
          type: array
          $ref: '#/components/schemas/FileProductsRepeated'
          example:
            - row: 3
              product: Papas
              type: Mercaderia tienda
              error: Product with barcode 123456 is in the database
    ErrorFileProductsBadRequest:
      title: Bad request
      type: object
      properties:
        statusCode:
          type: number
          description: Status error code
          example: 400
        message:
          type: string
          description: Error message
          example: File can't be null
        error:
          type: string
          description: Error title from the API
          example: Bad request
    FileProcessingResponse:
      title: FileProcessingResponse
      x-stoplight:
        id: smhptkk5whbbw
      type: object
      properties:
        successfulCount:
          type: number
        repeatedCount:
          type: number
        errorCount:
          type: number
    DistributionChannel:
      title: DistributionChannel
      x-stoplight:
        id: 8b8vuf08gde79
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          type: integer
    Barcode:
      title: Barcode
      x-stoplight:
        id: 5u4qgkw4ua6p2
      type: object
      properties:
        barcodeTypeId:
          type: string
          enum:
            - EAN
            - UPC
            - JAN
            - ISBN
        code:
          type: string
        status:
          type: string
          enum:
            - PRINCIPAL
      required:
        - barcodeTypeId
        - code
        - status
    Brand:
      title: Brand
      x-stoplight:
        id: i0hqtymkwr0jx
      type: object
      properties:
        id:
          type: number
        name:
          type: string
    ItemGroup:
      title: ItemGroup
      x-stoplight:
        id: ym704jviv395i
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    CatalogItem:
      title: CatalogItem
      x-stoplight:
        id: 66a8slnmc5bpj
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    LogisticDimensions:
      type: object
      properties:
        id:
          type: number
        type:
          type: string
          enum:
            - PRODUCTO
            - ENVASE
            - EMBALAJE
            - PALET
        heightValue:
          type: number
          format: float
          minimum: 1
          maximum: 9999.99
        heightUnitMeasure:
          type: string
          enum:
            - CM
        widthValue:
          type: number
          format: float
          minimum: 1
          maximum: 9999.99
        widthUnitMeasure:
          type: string
          enum:
            - CM
        lengthValue:
          type: number
          format: float
          minimum: 1
          maximum: 9999.99
        lengthUnitMeasure:
          type: string
          enum:
            - CM
        weightValue:
          type: number
          format: float
          minimum: 1
          maximum: 9999.99
        weightUnitMeasure:
          type: string
          enum:
            - KILOGRAMO(S)
        quantityPerDisplay:
          type: number
          minimum: 0
          maximum: 99999
        codeType:
          type: string
          enum:
            - DUN14
        codeValue:
          type: string
    FoodAttributeProductConfig:
      type: object
      title: FoodAttributeConfigDto
      properties:
        idFoodAttributeProductConfig:
          type: number
        idFoodAttribute:
          type: number
        value:
          type: string
          enum:
            - SI
            - 'NO'
            - NO APLICA
      required:
        - idFoodAttributeProductConfig
        - idFoodAttribute
        - value
    ProductDetail:
      title: Product to be update
      type: object
      description: Product to be update
      examples:
        - genericName: string
          barcodes:
            - barcodeTypeId: EAN
              code: string
              status: PRINCIPAL
          deliveryDays: 0
          baseUnitMeasureId: UN
          orderUnitId: UN
          baseConversionUnit: 2
          tax: AFECTO
          hasBrand: true
          brandId: 1
          itemGroupId: 01001CP06
          logisticDimensions:
            - id: 0
              type: PRODUCTO
              heightValue: 1
              heightUnitMeasure: CM
              widthValue: 1
              widthUnitMeasure: CM
              lengthValue: 1
              lengthUnitMeasure: CM
              weightValue: 1
              weightUnitMeasure: KILOGRAMO(S)
              quantityPerDisplay: 0
              codeType: DUN14
              codeValue: string
          foodAttributesProductConfig:
            - idFoodAttributeProductConfig: 0
              idFoodAttribute: 0
              value: SI
          expiringDays: 1
          salesFormatId: BA
          contentTypeId: LT
          contentQuantity: 1
          supplyTypeId: HB
          transportModeId: CG
          storageConditionId: CG
          distributionChannels:
            - idDistributionChannel: DC01
          specificTaxId: AGUAS
          photos:
            - id: 1
              productId: 147
              code: db452a80-56a7-474e-a098-48e49ec5f5f3
              isPrincipal: true
              status: 1
              name: sample.jpg
              type: .jpg
              size: 134
              url: 'https://arpm-mrch-pim-backend-uploads-dev.s3.amazonaws.com/supplier/rol/sample.jpg?AWSAccessKeyId=ABCASDASDASDAS'
          nameInInternalChannel: string
          nameInExternalChannel: string
          description: string
          ecommerceChannels:
            - SCAN&GO
            - AUTOSERVICIO
            - AGREGADORES
          ecommerceDocuments:
            - id: 1
              productId: 147
              documentTypeId: ESPECIFICACIONES
              code: db452a80-56a7-474e-a098-48e49ec5f5f3
              status: 1
      properties:
        genericName:
          type: string
        barcodes:
          type: array
          items:
            $ref: '#/components/schemas/Barcode'
        deliveryDays:
          type: number
        baseUnitMeasureId:
          type: string
          enum:
            - UN
            - CJ
            - CA
            - CAJ
            - CT
            - FR
            - BR
            - BID
            - BOL
            - LC
            - CLD
            - DTE
            - LTA
            - PQT
            - TRR
            - CM3
            - L
            - G
            - KG
            - PAC
        orderUnitId:
          type: string
          enum:
            - UN
            - CJ
            - CA
            - CAJ
            - CT
            - FR
            - BR
            - BID
            - BOL
            - LC
            - CLD
            - DTE
            - LTA
            - PQT
            - TRR
            - CM3
            - L
            - G
            - KG
            - PAC
        baseConversionUnit:
          type: number
          minimum: 2
        tax:
          type: string
          enum:
            - AFECTO
            - EXENTO
        hasBrand:
          type: boolean
        brandId:
          type: number
          minimum: 1
        itemGroupId:
          type: string
          enum:
            - 01001CP06
            - 01001CP07
            - 01001CP08
            - 01001CP11
            - 01001CP12
            - 01001CP13
            - 01001CP21
            - 01001CP27
        logisticDimensions:
          type: array
          items:
            $ref: '#/components/schemas/LogisticDimensions'
        foodAttributesProductConfig:
          type: array
          items:
            $ref: '#/components/schemas/FoodAttributeProductConfig'
        expiringDays:
          type: number
          minimum: 1
          maximum: 2000
        salesFormatId:
          type: string
          enum:
            - BA
            - BL
            - BS
            - BT
            - CJ
            - ES
            - FR
            - LT
            - PK
            - PQ
            - SB
            - TB
            - TJ
            - TR
            - TT
        contentTypeId:
          type: string
          enum:
            - LT
            - GR
            - KG
            - CM3
        contentQuantity:
          type: number
          minimum: 1
          maximum: 999999999
        supplyTypeId:
          type: string
          enum:
            - HB
            - PC
            - PD
            - SR
        transportModeId:
          type: string
          enum:
            - CG
            - LG
            - PL
            - RF
        storageConditionId:
          type: string
          enum:
            - CG
            - CT
            - ES
            - RF
            - TA
        distributionChannels:
          type: array
          items:
            $ref: '#/components/schemas/DistributionChannelsIds'
        specificTaxId:
          type: string
          enum:
            - AGUAS
            - BEBIDAS
            - CARNES
            - CERVEZAS
            - CIGARRILLOS
            - HARINAS
            - LICORES
            - VINOS
        photos:
          type: array
          items:
            $ref: '#/components/schemas/ProductPhoto'
        nameInInternalChannel:
          type: string
          minLength: 3
          maxLength: 40
        nameInExternalChannel:
          type: string
          minLength: 3
          maxLength: 40
        description:
          type: string
          maxLength: 150
        ecommerceChannels:
          type: array
          items:
            $ref: '#/components/schemas/ProductEcommerceChannel'
        ecommerceDocuments:
          type: array
          items:
            $ref: '#/components/schemas/ProductEcommerceDocument'
    FoodAttribute:
      title: FoodAttribute
      x-stoplight:
        id: 7b3v7hi0k14n0
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        category:
          type: string
          enum:
            - FOOD-CONDITIONS
            - NUTRITIONAL_INFORMATION
        imageCode:
          type: string
        status:
          type: integer
      description: ''
    DistributionChannelsIds:
      title: Distribution channels id's
      type: object
      properties:
        idDistributionChannel:
          type: string
          enum:
            - DC01
            - DC02
    ProductPhoto:
      title: Product's photos
      type: object
      properties:
        id:
          type: number
          description: ID of the photo in the table
          example: 1
        productId:
          type: number
          description: ID of the product in the database
          example: 147
        code:
          type: string
          description: Internal UUID of the file in database and S3 storage
          example: db452a80-56a7-474e-a098-48e49ec5f5f3
        isPrincipal:
          type: boolean
        status:
          type: integer
          example: 1
        name:
          type: string
          description: Real name of the file
          example: sample.jpg
        type:
          type: string
          description: Type/extension of the file
          example: .jpg
        size:
          type: number
          description: Size in kilobytes of the file
          example: 134
        url:
          type: string
          description: Type/extension of the file
          example: 'https://arpm-mrch-pim-backend-uploads-dev.s3.amazonaws.com/supplier/rol/sample.jpg?AWSAccessKeyId=ABCASDASDASDAS'
      required:
        - id
        - code
        - isPrincipal
    ProductEcommerceChannel:
      title: Product's e-commerce channels
      type: object
      properties:
        id:
          type: number
          description: ID of the product e-commerce channel in the table
          example: 1
        productId:
          type: number
          description: ID of the product in the database
          example: 147
        ecommerceChannelId:
          type: string
          enum:
            - AGREGADORES
            - AUTOSERVICIO
            - SCAN&GO
        status:
          type: integer
          example: 1
      required:
        - ecommerceChannelId
    ProductEcommerceDocument:
      title: Product's e-commerce documents
      type: object
      properties:
        id:
          type: number
          description: ID of the product e-commerce document in the table
          example: 1
        productId:
          type: number
          description: ID of the product in the database
          example: 147
        documentTypeId:
          type: string
          enum:
            - ESPECIFICACIONES
            - NUTRICIONAL
            - PREGUNTAS
            - SIMILARES
            - VIDEO
        code:
          type: string
          description: Internal UUID of the file in database and S3 storage
          example: db452a80-56a7-474e-a098-48e49ec5f5f3
        status:
          type: integer
          example: 1
        name:
          type: string
        type:
          type: string
        size:
          type: number
        url:
          type: string
      required:
        - id
        - documentTypeId
        - code
        - name
        - type
        - size
        - url
