openapi: 3.1.0
info:
  version: '1.0'
  title: ArcoPrime PIM project API/endpoints for products microservice
  description: API for products
  contact:
    name: API Support
    email: contacto@arcoprime.cl
    url: 'https://arcoprime.cl/'
  x-logo:
    url: 'https://www.prontocopec.cl/pronto/site/artic/20170516/imag/foto_0000000320170516112513.png'
    altText: PIM Pronto Copec
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:3000'
    description: Localhost
  - url: 'https://10nor47a33.execute-api.us-east-1.amazonaws.com/dev'
    description: Development sandbox
tags:
  - name: products
    description: Operations about products
paths:
  /product:
    get:
      summary: Search products
      description: Search product with params
      tags:
        - products
      operationId: get-product
      responses:
        '200':
          description: Product searched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  meta:
                    $ref: '#/components/schemas/PageMeta'
        '404':
          description: Not Found
      parameters:
        - schema:
            type: number
          in: query
          name: page
          description: page number
          required: true
        - schema:
            type: number
            default: 10
          in: query
          name: take
          description: number of files per page
        - schema:
            type: string
            minLength: 3
          in: query
          name: value
          description: Value of name, brand or product SKU
          required: false
        - schema:
            type: string
            minLength: 3
          in: query
          name: category
          description: ID of category to search
          required: false
        - schema:
            type: string
            minLength: 5
          in: query
          name: hierarchy
          description: ID of hierarchy to search
          required: false
        - schema:
            type: string
            minLength: 5
          in: query
          name: family
          description: ID of family to search
          required: false
        - schema:
            type: array
          in: query
          name: status
          description: Status to search
          required: false
        - schema:
            type: string
            minLength: 3
            maxLength: 4
          in: query
          name: order
          description: Order products ASC or DESC
          required: false
        - schema:
            type: string
          in: query
          name: orderProperty
          description: Field name to order products
          required: false
  /classification:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClassificationLevel'
      operationId: get-classification
      parameters:
        - schema:
            type: number
            example: 2
            minimum: 1
            maximum: 4
          in: query
          name: level
          required: true
        - schema:
            type: string
            example: A0101
          in: query
          name: parentLevelId
  /product/load:
    post:
      tags:
        - products
      summary: Load products
      description: Load products with a MS Excel file with info of products to be loaded massively
      operationId: post-load-products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileProductsLoad'
      responses:
        '201':
          description: File processed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileProductsResponse"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorFileProductsBadRequest'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Product:
      title: Product
      type: object
      description: ''
      examples:
        - id: 50
          sku: "9849839"
          genericName: Pisco quebranta
          type: MERCADERIA
          creationStatus: TO_BE_APPROVED
          classification:
            family: Tragos preparados
            hierarchy: Bebidas alcoholicas
            category: Liquidos
          log:
            createdAt: "2022-05-05T18:52:27.376Z"
            updatedAt: "2022-05-05T18:52:27.376Z"
            createdBy:
              id: 1
              name: Sergio
              lastname: Bardales
              email: sergiobardales@arcoprime.cl
            updatedBy: null
          photoUrl: "https://arpm-mrch-pim-backend-uploads-dev.s3.amazonaws.com/product/photo/37d73d7c-878d-4861-88fc-e8c5940d84b9.jpeg?AWSAccessKeyId=AKIA2O4LXKVXZSNHD35Z&Expires=1653172663&Signature=xOh47CxBF6lgvGoRQ7A976C2xjU%3D"
      properties:
        id:
          type: integer
          description: Unique identifier for the given product
        sku:
          type: string
        genericName:
          type: string
          minLength: 1
          maxLength: 15
        brandName:
          type: string
          format: email
        classification:
          $ref: '#/components/schemas/Clasification'
        type:
          type: string
          description: Set to true if the user's email has been verified.
          enum:
            - MERCADERIA
        creationStatus:
          type: string
          format: date
          description: The date that the user was created.
          enum:
            - EDITING
            - REVIEW
            - TO_BE_APPROVED
            - TO_BE_PUBLISHED
            - PUBLISHED
            - REJECTED
            - ERROR
        log:
          $ref: '#/components/schemas/Log'
        photoUrl:
          type: string
          format: uuid
    Clasification:
      title: Clasification
      type: object
      properties:
        category:
          type: string
        hierarchy:
          type: string
        family:
          type: string
    Log:
      title: Log
      type: object
      description: Model to support logging information
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2018-05-15T14:51:12.402+00:00'
        updatedAt:
          type: string
          format: date-time
          example: '2018-05-15T14:51:12.402+00:00'
        createdBy:
          $ref: '#/components/schemas/User'
        updatedBy:
          $ref: '#/components/schemas/User'
    Error:
      title: Error
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string    
    PageMeta:
      title: PageMeta
      type: object
      description: pagination data
      properties:
        page:
          type: number
          description: current page
        take:
          type: number
          description: number of rows per page
        totalRecords:
          type: number
          description: total number of records
        pageCount:
          type: number
          description: total number of pages
        hasPreviusPage:
          type: boolean
          description: this flag means there is a previous page to retrieve
        hasNextPage:
          type: boolean
          description: this flag means there is a next page to retrieve
    User:
      title: User
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        lastname:
          type: string
        email:
          type: string
    ClassificationLevel:
      title: ClassificationLevel
      x-stoplight:
        id: 0lev1fag7pnkj
      type: object
      properties:
        id:
          type: string
        description:
          type: string
    FileProductsLoad:
      title: File with info of products to be loaded
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file
    FileFieldError:
      title: Errors in field validation
      type: array
      properties:
        field:
          type: string
          example: NOMBRE DE PRODUCTO(40)
          description: Name of the field (column) with error
        error:
          type: string
          example: Value is undefined
          description: Details of the error
      example: [ {"field": "NOMBRE DE PRODUCTO(40)", "error": "Value is undefined" }]
    FileProductsError:
      title: Products with errors in field validation
      type: array
      properties:
        row:
          type: integer
          example: 1
          description: Number of row in file
        name:
          type: string
          example: 'Papas'
          description: Name of the product
        type:
          type: string
          example: MERCADERIA TIENDA
          description: Type of the product
        errors:
          type: array
          $ref: "#/components/schemas/FileFieldError"
      example: [{ "row": 1, "name": "", "type": "Mercaderia tienda", "errors": [ {"field": "NOMBRE DE PRODUCTO(40)", "error": "Value is undefined" }] }]
    FileProductsSuccessfully:
      title: Products without errors in field validation
      type: array
      properties:
        row:
          type: integer
          example: 2
          description: Number of row in file
        name:
          type: string
          example: Papas
          description: Name of the product
        type:
          type: string
          example: MERCADERIA TIENDA
          description: Type of the product
        message:
          type: string
          example: Product ready to be processed
          description: Product ready to be processed
      example: [{ "row": 2, "name": "Papas", "type": "MERCADERIA TIENDA", "message": "Product ready to be processed" }]
    FileProductsRepeated:
      title: Products with same barcode (SKU) in the database
      type: array
      properties:
        row:
          type: integer
          example: 3
          description: Number of row in file
        name:
          type: string
          example: Papas
          description: Name of the product
        type:
          type: string
          example: MERCADERIA TIENDA
          description: Type of the product
        message:
          type: string
          example: Product with barcode 123456 is in the database
          description: Product is repeated
      example: [{ "row": 3, "name": "Papas", "type": "MERCADERIA TIENDA", "error": "Product with barcode 123456 is in the database" }]
    FileProductsResponse:
      title: API response after process file
      type: object
      properties:
        totalRows:
          type: number
          example: 150
          description: Total rows in files
        totalProcessed:
          type: number
          example: 100
          description: Total rows processed
        errorsCount:
          type: string
          example: 1/3
          description: Error counter with total
        productsErrors:
          type: array
          $ref: "#/components/schemas/FileProductsError"
          
        successfullyCount:
          type: string
          example: 1/3
          description: Successfully counter with total
        productsSuccessfully:
          type: array
          $ref: "#/components/schemas/FileProductsSuccessfully"
          example: [{ "row": 2, "product": "Papas", "type": "Mercaderia tienda", "message": "Product ready to be processed" }]
        repeatedCount:
          type: string
          example: 1/3
          description: Repeated counter with total
        productsRepeated:
          type: array
          $ref: "#/components/schemas/FileProductsRepeated"
          example: [{ "row": 3, "product": "Papas", "type": "Mercaderia tienda", "error": "Product with barcode 123456 is in the database" }]
    ErrorFileProductsBadRequest:
      title: Bad request
      type: object
      properties:
        statusCode:
          type: number
          description: Status error code
          example: 400
        message:
          type: string
          description: Error message
          example: File can't be null
        error:
          type: string
          description: Error title from the API
          example: Bad request